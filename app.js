require('dotenv').config();

const express = require('express');
const path = require('path');
const mongoose = require('mongoose');
const session = require('express-session');

const productRoutes = require('./routes/productRoutes');
const cartRoutes = require('./routes/cartRoutes');
const checkoutRoutes = require('./routes/checkoutRoutes');
const adminRoutes = require('./routes/adminRoutes');        // <-- ch·ªâ khai b√°o 1 l·∫ßn
const authRoutes = require('./routes/authRoutes');
const orderRoutes = require('./routes/orderRoutes');
const accountRoutes = require('./routes/accountRoutes');    // profile / account
const cartCount = require('./middleware/cartCount');

const { isAuthenticated, isAdmin } = require('./middleware/auth');
const User = require('./models/User');

const app = express();

const PORT = process.env.PORT || 4000;
const MONGODB_URI =
  process.env.MONGODB_URI || 'mongodb://caycanh-mongo:27017/caycanhshop';

// ----- VIEW ENGINE -----
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// ----- BODY PARSER -----
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// ----- STATIC FILES -----
app.use(express.static(path.join(__dirname, 'public')));

// serve ·∫£nh upload (public/uploads/xxx.jpg -> /uploads/xxx.jpg)
app.use(
  '/uploads',
  express.static(path.join(__dirname, 'public/uploads'))
);

// ----- SESSION -----
app.use(
  session({
    secret: process.env.SESSION_SECRET || 'caycanh-secret',
    resave: false,
    saveUninitialized: false,
    cookie: {
      maxAge: 24 * 60 * 60 * 1000, // 1 ng√†y
    },
  })
);

// ----- G·∫ÆN TH√îNG TIN USER CHO VIEW (header d√πng isLoggedIn, role, username) -----
app.use(isAuthenticated);

// ----- CART COUNT + helper format ti·ªÅn -----
app.use(cartCount);
app.use((req, res, next) => {
  res.locals.formatCurrency = (num) => {
    if (!num && num !== 0) return '';
    return Number(num).toLocaleString('vi-VN') + '‚Ç´';
  };
  next();
});

// =================== PUBLIC ROUTES ===================

// auth (login/register/logout)
app.use('/', authRoutes);

// account: h·ªì s∆° c√° nh√¢n, ƒë·ªïi m·∫≠t kh·∫©u,...
app.use('/account', accountRoutes);

// trang ch·ªß + chi ti·∫øt s·∫£n ph·∫©m
app.use('/', productRoutes);

// gi·ªè h√†ng
app.use('/cart', cartRoutes);

// checkout
app.use('/checkout', checkoutRoutes);

// ƒë∆°n h√†ng c·ªßa t√¥i (customer)
app.use('/orders', orderRoutes);

// contact tƒ©nh
app.get('/contact', (req, res) => {
  res.render('contact', { title: 'Li√™n h·ªá' });
});

// =================== ADMIN ROUTES ===================
// ·ªü ƒë√¢y M√åNH check isAdmin CHUNG 1 L·∫¶N cho to√†n b·ªô adminRoutes
app.use('/admin', isAdmin, adminRoutes);

// =================== 404 ===================
app.use((req, res) => {
  res.status(404).send('Kh√¥ng t√¨m th·∫•y trang üò¢');
});

// =================== DB CONNECT + SEED ADMIN ===================
mongoose
  .connect(MONGODB_URI)
  .then(async () => {
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB');

    // seed admin n·∫øu ch∆∞a c√≥
    const adminExists = await User.findOne({ role: 'admin' });
    if (!adminExists) {
      await User.create({
        username: 'admin',
        password: '123456',
        role: 'admin',
        // c√°c field kh√°c tu·ª≥ User schema sau n√†y (email, fullName,...)
      });
      console.log('‚úÖ Admin m·∫∑c ƒë·ªãnh: admin / 123456');
    } else {
      console.log('‚ÑπÔ∏è Admin ƒë√£ t·ªìn t·∫°i');
    }

    app.listen(PORT, () => {
      console.log(`üåø C√¢y C·∫£nh Shop ch·∫°y t·∫°i http://localhost:${PORT}`);
    });
  })
  .catch((err) => {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err.message);
  });
